{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Brown CBC's Introduction to Jupyter and Conda This site serves as an index for tutorials regarding the tools and infrastructure used in the CBC workshop series, most notably Jupyter and Conda. Authors Andrew Leith Contact For assistance, contact cbc-help@brown.edu - this is our general help line, so please specify that your issue is with this site's contents","title":"Home"},{"location":"#brown-cbcs-introduction-to-jupyter-and-conda","text":"This site serves as an index for tutorials regarding the tools and infrastructure used in the CBC workshop series, most notably Jupyter and Conda.","title":"Brown CBC's Introduction to Jupyter and Conda"},{"location":"#authors","text":"Andrew Leith","title":"Authors"},{"location":"#contact","text":"For assistance, contact cbc-help@brown.edu - this is our general help line, so please specify that your issue is with this site's contents","title":"Contact"},{"location":"conda_tutorial/","text":"Conda Tutorial What is conda? conda is a package manager - it allows you to build and install software on any system regardless of whether or not you have administrative priveleges. conda is largely automated and simplifies the process of installing complex tools by automatically installing the necessary system dependencies. Most, if not all, of the tools we use in our workshops are available through conda. Thus, once you install conda, you will easily be able to install the other tools you need. Installing conda There are multiple versions of conda, differentiated by two things: the number of default packages that it installs, and the version of python it uses. For our purposes, we recommend using 'miniconda' - the version of conda with the fewest default packages, to enable the most customized installation - and python 2.7. To install miniconda, simply go to the miniconda website and select the correct version for your operating system. miniconda is available for Windows, OS X, and Linux; the installation for Windows uses a typical .exe file, while the process on OS X and Linus is a bit more involved. We will therefore describe the OS X (conda for Python 2) installation process here. Rather than being a typical executible file, the conda installer for OS X (and Linux) is actually a script that must be run from the command line. To do so, first open the terminal: Once you have done so, type: cd ~/ Downloads bash Miniconda2 - latest - MacOSX - x86_64 . sh (The filename shown here should remain correct as new releases are published, since the current release is always entitled 'latest', but if you receive an error about the file not existing you should double-check it and make sure the filename after 'bash' matches the name of the file you downloaded.) Running this installer will lead to an interactive session wherein you are asked to accept a licensing agreement. Do so, and accept the default options as well. With these steps completed, conda is now installed. One of the previous steps added conda to your 'PATH', which is the list of directories in which your computer looks for software when you type a command into the terminal. However, this update will only take effect once you restart your terminal. You can do so with the folllowing command: source ~ . / bash_profile To verify that conda is installed, type: conda --help If you see the conda manual, you have successfully completed the installation.","title":"Conda Tutorial"},{"location":"conda_tutorial/#conda-tutorial","text":"What is conda? conda is a package manager - it allows you to build and install software on any system regardless of whether or not you have administrative priveleges. conda is largely automated and simplifies the process of installing complex tools by automatically installing the necessary system dependencies. Most, if not all, of the tools we use in our workshops are available through conda. Thus, once you install conda, you will easily be able to install the other tools you need. Installing conda There are multiple versions of conda, differentiated by two things: the number of default packages that it installs, and the version of python it uses. For our purposes, we recommend using 'miniconda' - the version of conda with the fewest default packages, to enable the most customized installation - and python 2.7. To install miniconda, simply go to the miniconda website and select the correct version for your operating system. miniconda is available for Windows, OS X, and Linux; the installation for Windows uses a typical .exe file, while the process on OS X and Linus is a bit more involved. We will therefore describe the OS X (conda for Python 2) installation process here. Rather than being a typical executible file, the conda installer for OS X (and Linux) is actually a script that must be run from the command line. To do so, first open the terminal: Once you have done so, type: cd ~/ Downloads bash Miniconda2 - latest - MacOSX - x86_64 . sh (The filename shown here should remain correct as new releases are published, since the current release is always entitled 'latest', but if you receive an error about the file not existing you should double-check it and make sure the filename after 'bash' matches the name of the file you downloaded.) Running this installer will lead to an interactive session wherein you are asked to accept a licensing agreement. Do so, and accept the default options as well. With these steps completed, conda is now installed. One of the previous steps added conda to your 'PATH', which is the list of directories in which your computer looks for software when you type a command into the terminal. However, this update will only take effect once you restart your terminal. You can do so with the folllowing command: source ~ . / bash_profile To verify that conda is installed, type: conda --help If you see the conda manual, you have successfully completed the installation.","title":"Conda Tutorial"},{"location":"jupyter_tutorial/","text":"Jupyter Tutorial To install Jupyter, please first install conda. A link to the conda installation tutorial can be found on the sidebar to the left. What is Jupyter? Jupyter is a piece of software for interactively writing and running code in a web browser using 'notebooks'. We use Jupyter notebooks in all of our interactive workshops, so if you're reading this, odds are you're familiar with their use and looking to configure Jupyter on your own system. Installing Jupyter The best way to install Jupyter is using the conda package manager . The rest of this guide will assume that you have a functioning installation of conda on the system you're using to install Jupyter. Actually installing Jupyter is very simple - simply open a terminal and type: conda install jupyter and conda will take care of the entire process! By default, Jupyter can only run Python code; to configure it to run R code takes a few additional steps. Configuring Jupyter to Run R There are several R packages that must be installed in order to allow Jupyter to recognize R. To prepare R, open an interactive R session and install the 'devtools' package by typing the following into R: install . packages ( \"devtools\" ) devtools is an R package that allows you to install packages from locations other than the typical centralized repositories like CRAN and Bioconductor. Once devtools is installed, install the 'IRkernel' package by typing: devtools :: install_github ( 'IRkernel/IRkernel' ) This command installs the IRkernel package from the IRkernel github (the 'IRkernel/IRkernel' part is not a typo - it is specifying the github repository name and then the package name, which happen to be called the same thing). The IRkernel package is a Jupyter R 'kernel' - a piece of software that allows Jupyter to interact with R. Once the IRkernel package is installed, there is only one remaining step. Once again, in your R window, type: IRkernel :: installspec () This command runs the installspec() function within the IRkernel package. This command syntax, with the two colons, is a way of explicitly calling a function from within a specific package; as such, you do not need to call library() first. installspec() will automatically configure your Jupyter R kernel based on the installation of R you have on your system. Full documentation relating to IRkernel can be found at their repository .","title":"Jupyter Tutorial"},{"location":"jupyter_tutorial/#jupyter-tutorial","text":"To install Jupyter, please first install conda. A link to the conda installation tutorial can be found on the sidebar to the left. What is Jupyter? Jupyter is a piece of software for interactively writing and running code in a web browser using 'notebooks'. We use Jupyter notebooks in all of our interactive workshops, so if you're reading this, odds are you're familiar with their use and looking to configure Jupyter on your own system. Installing Jupyter The best way to install Jupyter is using the conda package manager . The rest of this guide will assume that you have a functioning installation of conda on the system you're using to install Jupyter. Actually installing Jupyter is very simple - simply open a terminal and type: conda install jupyter and conda will take care of the entire process! By default, Jupyter can only run Python code; to configure it to run R code takes a few additional steps. Configuring Jupyter to Run R There are several R packages that must be installed in order to allow Jupyter to recognize R. To prepare R, open an interactive R session and install the 'devtools' package by typing the following into R: install . packages ( \"devtools\" ) devtools is an R package that allows you to install packages from locations other than the typical centralized repositories like CRAN and Bioconductor. Once devtools is installed, install the 'IRkernel' package by typing: devtools :: install_github ( 'IRkernel/IRkernel' ) This command installs the IRkernel package from the IRkernel github (the 'IRkernel/IRkernel' part is not a typo - it is specifying the github repository name and then the package name, which happen to be called the same thing). The IRkernel package is a Jupyter R 'kernel' - a piece of software that allows Jupyter to interact with R. Once the IRkernel package is installed, there is only one remaining step. Once again, in your R window, type: IRkernel :: installspec () This command runs the installspec() function within the IRkernel package. This command syntax, with the two colons, is a way of explicitly calling a function from within a specific package; as such, you do not need to call library() first. installspec() will automatically configure your Jupyter R kernel based on the installation of R you have on your system. Full documentation relating to IRkernel can be found at their repository .","title":"Jupyter Tutorial"}]}